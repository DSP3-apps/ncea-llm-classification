id: template_standard_flow
name: Template Standard Flow
environment:
  python_requirements_txt: requirements.txt
inputs:
  source:
    type: string
    default: NE Sample
    is_chat_input: false
  title:
    type: string
    is_chat_input: false
    default: Bathing Waters Monitoring Locations
  altTitle:
    type: string
    default: ""
    is_chat_input: false
  custodian:
    type: string
    default: Environment Agency
    is_chat_input: false
  topics:
    type: string
    default: "oceans "
    is_chat_input: false
  keywords:
    type: string
    default: beach, bathing freshwater, bathing water, bathing seawater, EAbatch2
    is_chat_input: false
  abstract:
    type: string
    default: "The Environment Agency collects and analyses water samples each year
      from May to September, to ensure that designated bathing water sites on
      the coast and inland are safe and clean for swimming and other activities.
      This shape file shows the approximate locations of our monitoring sites
      and the compliance or classification for each bathing water in England
      from 1988 to present. It is updated twice a year, to revise the inventory,
      and the assessment results. For coastal waters the specific locations of
      monitoring vary along a transect with the changing of the tides. The
      results of these samples are assessed in annual classifications and are
      available to view and download through the bathing water data explorer.
      This data is covered by AfA470. Attribution statement: Â© Environment
      Agency copyright and/or database right 2016. All rights reserved."
    is_chat_input: false
  lineage:
    type: string
    default: ""
    is_chat_input: false
  debug:
    type: bool
    default: true
outputs:
  id:
    type: string
    reference: ${generate_id_from_input.output}
  input:
    type: object
    reference: ${objectinator.output}
  output:
    type: list
    reference: ${back_classify.output}
nodes:
- name: generate_id_from_input
  type: python
  source:
    type: code
    path: generate_id_from_input.py
  inputs:
    input: ${catalogue_entry.output}
- name: catalogue_entry
  type: prompt
  source:
    type: code
    path: catalogue_prompt.jinja2
  inputs:
    source: ${inputs.source}
    title: ${inputs.title}
    altTitle: ${inputs.altTitle}
    custodian: ${inputs.custodian}
    topics: ${inputs.topics}
    keywords: ${inputs.keywords}
    abstract: ${inputs.abstract}
    lineage: ${inputs.lineage}
- name: objectinator
  type: python
  source:
    type: code
    path: objectinator.py
  inputs:
    input: ${catalogue_entry.output}
- name: read_instructions
  type: python
  source:
    type: code
    path: read_file.py
  inputs:
    file_path: ../../adversarial/Instructions.txt
- name: read_rules
  type: python
  source:
    type: code
    path: read_file.py
  inputs:
    file_path: ../../adversarial/rules.txt
- name: common_prompt
  type: prompt
  source:
    type: code
    path: common_prompt.jinja2
  inputs:
    rules: ${read_rules.output}
    instructions: ${read_instructions.output}
- name: benefit_collection
  type: python
  source:
    type: code
    path: read_file.py
  inputs:
    file_path: ../../ontology/ncea_ontology_lvl1-002.ttl
- name: asset_collection
  type: python
  source:
    type: code
    path: read_file.py
  inputs:
    file_path: ../../ontology/ncea_ontology_lvl1-001.ttl
- name: valuation_collection
  type: python
  source:
    type: code
    path: read_file.py
  inputs:
    file_path: ../../ontology/ncea_ontology_lvl1-003.ttl
- name: pressure_collection
  type: python
  source:
    type: code
    path: read_file.py
  inputs:
    file_path: ../../ontology/ncea_ontology_lvl1-004.ttl
- name: benefit_classify
  type: llm
  source:
    type: code
    path: theme_prompt.jinja2
  inputs:
    deployment_name: gpt-4o
    temperature: 1
    top_p: 1
    response_format:
      type: json_object
    catalogue_entry: ${catalogue_entry.output}
    common_prompt: ${common_prompt.output}
    ontology: ${benefit_collection.output}
  provider: AzureOpenAI
  connection: andre-m6qjiuui-eastus2
  api: chat
  module: promptflow.tools.aoai
  use_variants: false
- name: asset_classify
  type: custom_llm
  source:
    type: package_with_prompt
    tool: promptflow.tools.llm.llm
    path: theme_prompt.jinja2
  inputs:
    connection: andre-m6qjiuui-eastus2
    api: chat
    deployment_name: gpt-4o
    response_format:
      type: json_object
    common_prompt: ${common_prompt.output}
    catalogue_entry: ${catalogue_entry.output}
    ontology: ${asset_collection.output}
- name: valuation_classify
  type: custom_llm
  source:
    type: package_with_prompt
    tool: promptflow.tools.llm.llm
    path: theme_prompt.jinja2
  inputs:
    connection: andre-m6qjiuui-eastus2
    api: chat
    deployment_name: gpt-4o
    response_format:
      type: json_object
    common_prompt: ${common_prompt.output}
    catalogue_entry: ${catalogue_entry.output}
    ontology: ${valuation_collection.output}
- name: pressure_classify
  type: custom_llm
  source:
    type: package_with_prompt
    tool: promptflow.tools.llm.llm
    path: theme_prompt.jinja2
  inputs:
    connection: andre-m6qjiuui-eastus2
    api: chat
    deployment_name: gpt-4o
    response_format:
      type: json_object
    common_prompt: ${common_prompt.output}
    catalogue_entry: ${catalogue_entry.output}
    ontology: ${pressure_collection.output}
- name: collate_predictions
  type: python
  source:
    type: code
    path: collate_predictions.py
  inputs:
    asset: ${asset_classify.output}
    benefit: ${benefit_classify.output}
    pressure: ${pressure_classify.output}
    valuation: ${valuation_classify.output}
- name: back_classify
  type: python
  source:
    type: code
    path: back_classify.py
  inputs:
    predictions: ${collate_predictions.output}
    asset: ${asset_collection.output}
    valuation: ${valuation_collection.output}
    benefit: ${benefit_collection.output}
    pressure: ${pressure_collection.output}
